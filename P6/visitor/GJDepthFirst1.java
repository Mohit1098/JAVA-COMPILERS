//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import visitor.Trio;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst1<R,A> extends GJDepthFirst<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	String fun_name;
	boolean flabel=true;
	
	
	public Integer max(Integer a,Integer b) {
		if(a>b)
			return a;
		else
			return b;
	}
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      String ans="";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         ans=ans+(String)e.nextElement().accept(this,argu);
         _count++;
      }
      return (R)ans;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         String ans="";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
        	 ans=ans+(String)e.nextElement().accept(this,argu);
            _count++;
         }
         return (R)ans;
      }
      else
         return (R)"";
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return (R)"";
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      String ans="";
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
    	  ans=ans+(String)e.nextElement().accept(this,argu);
         _count++;
      }
      return (R)ans;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
      fun_name="main";
      
      String ans ;
      
      Integer i1=Integer.parseInt(n.f2.f0.tokenImage); 
      Integer i2=Integer.parseInt(n.f5.f0.tokenImage); 
      Integer i3=Integer.parseInt(n.f8.f0.tokenImage); 
      
      ans=	".text\n"
     		 +".globl\t"+fun_name+"\n"
     		 +fun_name+":\n"
     		 +"subu $sp, $sp, 8\n"
    		 +"sw $ra, 4($sp) \n"
    		+"sw $fp, 8($sp) \n"
      		+"subu $sp, $sp, 4 \n"
      		+"move $fp $sp\n"
      		+"subu $sp, $sp, "+(i2*4+12)+"\n";
    		  
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
//      n.f7.accept(this, argu);
//      n.f8.accept(this, argu);
//      n.f9.accept(this, argu);
        ans=ans+(String)n.f10.accept(this, argu);
//      n.f11.accept(this, argu);
//      n.f12.accept(this, argu);
        
        ans=ans+"addu $sp, $sp, "+(i2*4+16)+"\n"
        		+"lw $ra, 4($sp)\n"
        		+"lw $fp, 8($sp)\n"
        		+"move $sp $fp\n"
        		+"j $ra\n";
        
        System.out.println(ans);
        
        n.f13.accept(this, argu);
        
        String s="         .text\n" + 
        		"         .globl _halloc\n" + 
        		"_halloc:\n" + 
        		"         li $v0, 9\n" + 
        		"         syscall\n" + 
        		"         j $ra\n" + 
        		"\n" + 
        		"         .text\n" + 
        		"         .globl _print\n" + 
        		"_print:\n" + 
        		"         li $v0, 1\n" + 
        		"         syscall\n" + 
        		"         la $a0, newl\n" + 
        		"         li $v0, 4\n" + 
        		"         syscall\n" + 
        		"         j $ra\n" + 
        		"\n" + 
        		"         .data\n" + 
        		"         .align   0\n" + 
        		"newl:    .asciiz \"\\n\"\n" + 
        		"         .data\n" + 
        		"         .align   0\n" + 
        		"str_er:  .asciiz \" ERROR: abnormal termination\\n\"";
        
        System.out.println(s);
        
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      
      fun_name=n.f0.f0.tokenImage;
      
      String ans ;
      
      Integer i1=Integer.parseInt(n.f2.f0.tokenImage); 
      Integer i2=Integer.parseInt(n.f5.f0.tokenImage); 
      Integer i3=Integer.parseInt(n.f8.f0.tokenImage); 
      
      ans=	".text\n"
    		 +".globl\t"+fun_name+"\n"
    		 +fun_name+":\n"
    		 +"sw $ra, 4($sp) \n"
    		+"sw $fp, 8($sp) \n"
      		+"subu $sp, $sp, 4 \n"
      		+"move $fp $sp\n"
      		+"subu $sp, $sp, "+(i2*4+12)+"\n";
    		  
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
//      n.f7.accept(this, argu);
//      n.f8.accept(this, argu);
//      n.f9.accept(this, argu);
        ans=ans+(String)n.f10.accept(this, argu);
//      n.f11.accept(this, argu);
//      n.f12.accept(this, argu);
        
        ans=ans+"addu $sp, $sp, "+(i2*4+16)+"\n"
        		+"lw $ra, 4($sp)\n"
        		+"lw $fp, 8($sp)\n"
        		+"j $ra\n";
        System.out.println(ans);

        
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      flabel=false;
      R ans=n.f0.accept(this, argu);
      flabel=true;
      return ans;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      return (R)("nop\n");
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      return (R)("\n");
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      
      Pair <String,String> p1=(Pair <String,String>)n.f1.accept(this, argu);
      Pair <String,String> p2=(Pair <String,String>)n.f2.accept(this, argu);
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      String ans="beqz "+p1.s+" "+p2.s+"\n";
      return (R)ans;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      Pair <String,String> p2=(Pair <String,String>)n.f1.accept(this, argu);
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      String ans="b "+p2.s+"\n";
      return (R)ans;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      Pair <String,String> p1=(Pair <String,String>)n.f1.accept(this, argu);
      Pair <String,String> p2=(Pair <String,String>)n.f2.accept(this, argu);
      Pair <String,String> p3=(Pair <String,String>)n.f3.accept(this, argu);
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      String ans="sw "+p3.s+", "+p2.s+"("+p1.s+")\n";
      return (R)ans;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      Pair <String,String> p1=(Pair <String,String>)n.f1.accept(this, argu);
      Pair <String,String> p2=(Pair <String,String>)n.f2.accept(this, argu);
      Pair <String,String> p3=(Pair <String,String>)n.f3.accept(this, argu);
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      String ans="lw "+p1.s+", "+p3.s+"("+p2.s+")\n";
      return (R)ans;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      Pair <String,String> p1=(Pair <String,String>)n.f1.accept(this, argu);
      String ans=(String)n.f2.accept(this, (A)p1.s);
      return (R)ans;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      Pair <String,String> p1=(Pair <String,String>)n.f1.accept(this,(A)null);
      String ans="";
      
      if(p1.f.equals("int"))
    	  ans="li $a0 "+p1.s+"\n";
      else if(p1.f.equals("reg"))
    	  ans="move $a0 "+p1.s+"\n";
      
      ans=ans+"jal _print\n";
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      return (R)ans;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      Pair <String,String> p1=(Pair <String,String>)n.f1.accept(this, argu);
      
      String ans="lw "+p1.s+", -"+(Integer.parseInt(n.f2.f1.f0.tokenImage)*4)+"($fp)\n";
      
      return (R)ans;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      Pair <String,String> p1=(Pair <String,String>)n.f2.accept(this, argu);
      
      String ans="sw "+p1.s+", -"+(Integer.parseInt(n.f1.f1.f0.tokenImage)*4)+"($fp)\n";
      
      return (R)ans;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      Pair <String,String> p1=(Pair <String,String>)n.f2.accept(this, argu);
      
      String ans="sw "+p1.s+", -"+(Integer.parseInt(n.f1.f0.tokenImage)*4)+"($sp)\n";
      
      return (R)ans;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      Pair <String,String> p1=(Pair <String,String>)n.f1.accept(this, argu);
      
      String ans;
      
      if(p1.f.equals("reg"))
    	  ans="jalr "+p1.s+"\n";
      else
    	  ans="jal "+p1.s+"\n";
      
      return (R)ans;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      String reg=(String)argu;
      Pair <String,String> p1=(Pair <String,String>)n.f1.accept(this, (A)null);
      
      String ans;
      
      if(p1.f.equals("reg"))
    	  ans="move $a0 "+p1.s+"\n";
      else
    	  ans="li $a0 "+p1.s+"\n";
      
      ans=ans+"jal _halloc\n"+"move "+reg+" $v0\n";
      
      return (R)ans;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String OP=(String)n.f0.accept(this, argu);
      Pair <String,String> p1=(Pair <String,String>)n.f1.accept(this, argu);
      Pair <String,String> p2=(Pair <String,String>)n.f2.accept(this, (A)null);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      String ans;

      
      if(OP.equals("PLUS")) {
    	  ans="add "+argu+", "+p1.s+", "+p2.s+"\n";
      } else if(OP.equals("MINUS")) {
    	  ans="sub "+argu+", "+p1.s+", "+p2.s+"\n";
      } else if(OP.equals("TIMES")) {
    	  ans="mul "+argu+", "+p1.s+", "+p2.s+"\n";
      } else if(OP.equals("DIV")) {
    	  ans="div "+argu+", "+p1.s+", "+p2.s+"\n";
      } else if(OP.equals("LE")) {
    	  ans="sle "+argu+", "+p1.s+", "+p2.s+"\n";
      } else {
    	  ans="sne "+argu+", "+p1.s+", "+p2.s+"\n";
      }
      return (R)ans;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      return (R)("");
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      
      if(argu==null)
    	  return n.f0.accept(this, argu);
      else {
    	  Pair <String,String> p1=(Pair <String,String>)n.f0.accept(this, argu);
    	  String ans;
    	  if(p1.f.equals("reg")) {
    		  ans="move "+argu+" "+p1.s+"\n";
    	  } else if(p1.f.equals("idn")) {
    		  ans="la "+argu+" "+p1.s+"\n";
    	  }
    	  else {
    		  ans="li "+argu+" "+p1.s+"\n";
    	  }
    	  
    	  return (R)ans;
      }
//      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      Pair p =new Pair("reg",("$"+n.f0.accept(this, argu)));
      return (R)p;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      Pair p =new Pair("int",n.f0.accept(this, argu));
      return (R)p;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      
      if(flabel) {
    	  return (R) (n.f0.accept(this, argu)+": \n");
      }
      
      Pair p =new Pair("idn",n.f0.accept(this, argu));
      return (R)p;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      return (R)"";
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
