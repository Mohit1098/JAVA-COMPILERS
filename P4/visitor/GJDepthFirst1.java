//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import visitor.Pair;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst1<R,A> extends GJDepthFirst<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	int tempno=1000;
	
	String label;
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      String ans="",t="";
      Pair<String,String>p;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         p=(Pair<String,String>)e.nextElement().accept(this,argu);
         ans=ans+p.f;
         t=t+p.s;
         _count++;
      }
      Pair<String,String>pa=new Pair(ans,t);
      return (R)pa;
   }

   public R visit(NodeListOptional n, A argu) {
	   
	   Pair<String,String>pa;
	   
      if ( n.present() ) {
    	  String ans="",t="";
    	  Pair<String,String>p;
//         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
        	 p=(Pair<String,String>) e.nextElement().accept(this,argu);
        	 if(p!=null) {
        		 ans=ans+p.f;
                 t=t+p.s;
        	 }
        	
            _count++;
         }
         pa=new Pair(ans,t);
         return (R)pa;
      }
      else
    	  pa=new Pair(" "," ");
         return (R)pa;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ) {
    	  
    	  Pair<String,String> p=(Pair<String,String>)(n.node.accept(this,argu));
    	  Pair<String,String> pa;
    	  if(p!=null)
    		  pa=new Pair(p.s," ");
    	  else
    		  pa=new Pair(" "," ");
         return (R)pa;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      String ans="",t="";
	  Pair<String,String>p;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
    	  p=(Pair<String,String>)e.nextElement().accept(this,argu);
         _count++;
         if(p!=null) {
    		 ans=ans+p.f;
             t=t+p.s;
    	 }
      }
      Pair<String,String>pa=new Pair(ans,t);
      return (R)pa;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
//      System.out.println("Hello");
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      
//      n.f4.accept(this, argu);
      Pair<String,String>p1=(Pair<String,String>)n.f1.accept(this, argu);
      String ans="MAIN\n"+p1.f+"\nEND\n";
      System.out.println(ans);
      n.f3.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      Pair<String,String>p1=(Pair<String,String>)n.f4.accept(this, argu);
      String ans=(String)n.f0.f0.tokenImage+" [ "+n.f2.f0.tokenImage+" ]\nBEGIN\n"+p1.f+"\nRETURN "+p1.s+"\nEND\n";
      
      System.out.println(ans);
//      System.out.println("hello");
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      Pair<String,String> p = new Pair("NOOP\n"," ");
      return (R)p;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      Pair<String,String> p = new Pair("ERROR\n"," ");
      return (R)p;
//      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      Pair<String,String>p1=(Pair<String,String>)n.f1.accept(this, argu);
      String ans=p1.f+"CJUMP "+p1.s+" "+(String)n.f2.f0.tokenImage+"\n";
      Pair<String,String> p = new Pair(ans," ");
      return (R)p;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      String ans="JUMP "+(String)n.f1.f0.tokenImage+"\n";
      Pair<String,String> p = new Pair(ans," ");
      return (R)p;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      int temp_no=tempno;
      tempno++;
      
      Pair<String,Integer>p1=(Pair<String,Integer>)n.f1.accept(this, argu);
      Pair<String,Integer>p2=(Pair<String,Integer>)n.f3.accept(this, argu);
      
      String ans=p1.f+p2.f+"MOVE TEMP "+temp_no+" "+p2.s+"HSTORE "+p1.s+" "+(String)n.f2.f0.tokenImage+" TEMP "+(temp_no)+"\n";
      Pair<String,String> p = new Pair(ans," ");
//      System.out.println(ans);
      
      return (R)p;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      
      Pair<String,Integer>p1=(Pair<String,Integer>)n.f1.accept(this, argu);
      Pair<String,Integer>p2=(Pair<String,Integer>)n.f2.accept(this, argu);
      
      String ans=p2.f+"HLOAD "+p1.s+" "+p2.s+" "+(String)n.f3.f0.tokenImage+"\n";
      Pair<String,String> p = new Pair(ans," ");
//      System.out.println(ans);
      
      return (R)p;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      
      Pair<String,Integer>p1=(Pair<String,Integer>)n.f1.accept(this, argu);
      Pair<String,Integer>p2=(Pair<String,Integer>)n.f2.accept(this, argu);
      
      String ans=p2.f+"MOVE "+p1.s+" "+p2.s+"\n";
      
      Pair<String,String> p = new Pair(ans," ");
//      System.out.println(ans);
      
      return (R)p;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      
      int temp_no=tempno;
      tempno++;
      String ans;
      
      Pair<String,String>p1=(Pair<String,String>)n.f1.accept(this, argu);
      
      ans=p1.f+" PRINT "+p1.s+"\n";
      
      Pair<String,String> p = new Pair(ans," ");
      
//      System.out.println(ans);
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      return (R)p;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      
      String ans;
      
      Pair<String,Integer>p1=(Pair<String,Integer>)n.f1.accept(this, argu);
      Pair<String,Integer>p2=(Pair<String,Integer>)n.f3.accept(this, argu);
      
      ans=p1.f+p2.f;
      
      Pair<String,String> p = new Pair(ans,p2.s);
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      return (R)p;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      
      int temp_no=tempno;
      tempno+=2;
      String ans;
      
      Pair<String,String>p1=(Pair<String,String>)n.f1.accept(this, argu);
      Pair<String,String>p2=(Pair<String,String>)n.f3.accept(this, argu);
      
 
    ans=p1.f+p2.f+"MOVE TEMP "+temp_no+" "+p1.s+"\nMOVE TEMP "+(temp_no+1)+" CALL TEMP "+temp_no+" ( "+p2.s+" )\n";
     
      
      Pair<String,Integer> p = new Pair(ans,"TEMP "+(temp_no+1)+"\n");
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      return (R)p;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      int temp_no=tempno;
      tempno++;
      
      Pair<String,String>p1=(Pair<String,String>)n.f1.accept(this, argu);
      String ans=p1.f+"MOVE TEMP "+temp_no+" HALLOCATE "+p1.s+"\n";
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      Pair<String,String> p = new Pair(ans,"TEMP "+temp_no+"\n");
      return (R)p;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String ans="";
      int temp_no=tempno;
      tempno++;
      Pair<String,String>p1=(Pair<String,String>)n.f1.accept(this, argu);
      Pair<String,String>p2=(Pair<String,String>)n.f2.accept(this, argu);

      
      ans=p1.f+p2.f+"MOVE TEMP "+temp_no+" "+(String)n.f0.accept(this, argu)+" "+p1.s+" "+p2.s+"\n";
      
      Pair<String,String> p = new Pair(ans,"TEMP "+temp_no+"\n");
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      return (R)p;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
      
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      
      Pair<String,String> p = new Pair("\n"," TEMP "+(String)n.f1.f0.tokenImage+"\n");
      
      return (R)p;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String ans=(String)n.f0.accept(this, argu);
      
      int temp_no=tempno;
      tempno+=1;
      
      ans="MOVE TEMP "+(temp_no)+" "+ans+"\n";
      Pair<String,String> p = new Pair(ans," TEMP "+temp_no+"\n");
      
      return (R)p;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      
//      int temp_no=tempno;
//      tempno++;
//      label=(String)n.f0.tokenImage;
//      String ans="MOVE TEMP "+temp_no+" "+(String)n.f0.tokenImage+"\n";
      
      Pair<String,String> p = new Pair(" ",(String)n.f0.tokenImage+"\n");
      
      return (R)p;
//      return _ret;
   }

}
