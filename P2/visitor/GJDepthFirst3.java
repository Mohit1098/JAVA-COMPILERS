//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst3<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
	
	public HashMap<String,HashMap<String, String>>  Symboltable1;
	 
	 
	 public HashMap<String, HashMap<String,Pair<Pair<String,Vector<String>>,HashMap<String,String>>>>  Symboltable2;
	
	 
	 public HashMap<String,String> Parent ;
   //
	
	 
	 void Cycle(String c,String p) {
		 if(p==null)
			 return;
		 if(p.equals(c))
			 Error();
		 Cycle(c,Parent.get(p));
	 }
	 
	 
	public GJDepthFirst3(A argu) {
		
		Pair<HashMap<String,HashMap<String, String>> ,Pair<HashMap<String, HashMap<String,Pair<Pair<String,Vector<String>>,HashMap<String,String>>>>,HashMap<String,String>>> temp= 
				  (Pair<HashMap<String,HashMap<String, String>> ,Pair<HashMap<String, HashMap<String,Pair<Pair<String,Vector<String>>,HashMap<String,String>>>>,HashMap<String,String>>>)argu;
		  Symboltable1=temp.f;
		  Symboltable2=temp.s.f;
		  Parent=temp.s.s;
		
		// TODO Auto-generated constructor stub
	}

	public void Error(int x) {
		System.out.println("Type error");
		System.exit(0);
	}
	public void Error() {
		System.out.println("Type error");
		System.exit(0);
	}
	
	public void SError() {
		System.out.println("Symbol not found");
		System.exit(0);
	}
	
	
	public Pair<String,Vector<String>> FindFunc(String c,String f){
		if(Symboltable2.get(c)==null)
			SError();
		if(Symboltable2.get(c).get(f)==null) {
			if(Parent.get(c)==null) {
				SError();
			}
			return FindFunc(Parent.get(c),f);
		}
		return Symboltable2.get(c).get(f).f;
	}
	 
	 
	 void checkfunc(String c,String n,Pair<String,Vector<String>> v) {
		 if(Parent.get(c)==null)
			 return;
	 }
	
	boolean Daddy(String a,String b) {
		if(a==null)
			return false;
		if(a.equals(b)==true)
			return true;
		return Daddy(Parent.get(a),b);
	}
	 
	 String Type ( String myclass, String parameter) {
		 String par =myclass;
		 
		 if(Symboltable1.get(par)==null) {
			 SError();
		 }
		 
		 if(Symboltable1.get(par).get(parameter)!=null) {
			 return Symboltable1.get(par).get(parameter);
		 }
		 if(Parent.get(par)==null) {
			 SError();
		 }else {
			 par=Parent.get(par);
		 }
		 return Type(par,parameter);
	 }
	 
	 boolean Argmatch(Vector<String>a,Vector<String>b) {
		 
		
		 Iterator it = a.iterator();
		 Iterator ut = b.iterator();
		 
		 String s1,s2;
	      
	      it = a.iterator();
	      ut = b.iterator();
		      
		      while(it.hasNext() && ut.hasNext()) {
		    	  s1=(String)(it.next());
		    	  s2=(String)(ut.next());
		    	  
		    	if(Daddy(s1,s2)==false)
		    		return false;
		    	  
		      }
	      
	      if(it.hasNext() ||  ut.hasNext()) {
	    	  Error();
	      }
	      
	      return true;	 
	 }
	 
	 
	 void Overloading(String c,String n, Pair<String ,Vector<String>> v) {
		 
		 c=Parent.get(c);
		 if(c==null)
			 return;
		 
		 if(Symboltable2.get(c).get(n)!=null) {
			 Pair<String,Vector<String>> p =Symboltable2.get(c).get(n).f;
			 if(Daddy(v.f,p.f)==false || v.s.equals(p.s)==false)   {
				 Error();
			 }
		 }
		 Overloading(c,n,v);
		 
	 }
	 
	
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
 
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
        e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         String s="";
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            s=(String)e.nextElement().accept(this,argu);
            _count++;
         }
         return (R)s;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;

      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
        e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
//	   System.out.println(Symboltable2);
	   
	   for (Map.Entry<String,HashMap<String,String>> entry : Symboltable1.entrySet()) {
		   Cycle(entry.getKey(),Parent.get(entry.getKey()));
	   }
	  
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      Pair<String,HashMap<String,String>> p = new Pair<String,HashMap<String,String>>("",new HashMap<String,String>());
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, (A)p);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      
     
      
      Pair<String,HashMap<String,Pair<Pair<String,Vector<String>>,HashMap<String,String>>>> p =
    		  new Pair<String,HashMap<String,Pair<Pair<String,Vector<String>>,HashMap<String,String>>>>
      				(n.f1.f0.tokenImage,Symboltable2.get(n.f1.f0.tokenImage));
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, (A)(n.f1.f0.tokenImage));
      n.f4.accept(this,(A)p );
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      
      if(Symboltable1.get((String)n.f3.f0.tokenImage)==null) {
    	  SError();
      }
      
      Pair<String,HashMap<String,Pair<Pair<String,Vector<String>>,HashMap<String,String>>>> p =
    		  new Pair<String,HashMap<String,Pair<Pair<String,Vector<String>>,HashMap<String,String>>>>
      				(n.f1.f0.tokenImage,Symboltable2.get(n.f1.f0.tokenImage));
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this,(A)(n.f1.f0.tokenImage));
      n.f6.accept(this, (A)p);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      
      String l;
      
      l=(String) n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      if(l.equals("int")==false && l.equals("int[]")==false && l.equals("boolean")==false) {
    	  if(Symboltable1.get(l)==null) {
    		  SError();
    	  }
      }
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String r;
      n.f0.accept(this, argu);
      
      Pair<String, HashMap<String,Pair<Pair<String,Vector<String>>,HashMap<String,String>>>> table =
    		  (Pair<String, HashMap<String,Pair<Pair<String,Vector<String>>,HashMap<String,String>>>>) argu;
      
      String c = table.f;
      HashMap<String,String> a = table.s.get(n.f2.f0.tokenImage).s;
      
      Pair<String,HashMap<String,String>> p = new Pair<String,HashMap<String,String>>(c,a);
      							
      for (Map.Entry<String,String> entry : p.s.entrySet()) {
		   if(entry.getValue().equals("int")==false && entry.getValue().equals("int[]")==false && entry.getValue().equals("boolean")==false) {
			   if(Symboltable1.get(entry.getValue())==null)
				   SError();
		   }
	  }
      
      Overloading(p.f,(String)n.f2.f0.tokenImage,table.s.get(n.f2.f0.tokenImage).f);
      
      r = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A)c );
      n.f8.accept(this, (A)p );
      n.f9.accept(this, argu);
      
      if(r.equals("int")==false && r.equals("int[]")==false && r.equals("boolean")==false) {
		   if(Symboltable1.get(r)==null)
			   SError();
	   }
      
      
      if(Daddy((String)n.f10.accept(this,(A)p),r)==false) {
    	  
    	  Error();
      }
//      System.out.println("hello");
      
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
//      R _ret=null;
      return (R)(((Pair<Boolean,String>)n.f0.accept(this, argu)).s);
//      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)(new Pair<Boolean,String>(true,"int[]"));
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)(new Pair<Boolean,String>(true,"boolean"));
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)(new Pair<Boolean,String>(true,"int"));
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String l,ltype,r;
      ltype=new String("");
      l=(String)n.f0.f0.tokenImage;
      n.f1.accept(this, argu);
      r=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      Pair<String,HashMap<String,String>> p = (Pair<String,HashMap<String,String>>) argu;
      
      if(r.equals("int")==false && r.equals("int[]")==false && r.equals("boolean")==false) {
    	  if(Symboltable1.get(r)==null) {
    		  SError();
    	  }
      }
      
      if(p.s.get(l)!=null) {
    	  ltype=p.s.get(l);
      }else {
    	  ltype=Type(p.f,l);
      }
      if(Daddy(r,ltype)==false) {
    	  Error(435);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      
      Pair<String,HashMap<String,String>> p = (Pair<String,HashMap<String,String>>) argu;
      
      String l,ltype;
      ltype=new String("");
      
      l=(String)n.f0.f0.tokenImage;
      
      if(p.s.get(l)!=null) {
    	  ltype=p.s.get(l);
      }else {
    	  ltype=Type(p.f,l);
      }
      if(ltype.equals("int[]")==false) {
    	  Error(465);
      }
      
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("int")==false) {
    	  Error(470);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(((String)n.f5.accept(this, argu)).equals("int")==false) {
    	  Error(475);
      }
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("boolean")==false) {
    	  Error(503);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("boolean")==false) {
    	  Error(524);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("boolean")==false) {
    	  Error(545);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("int")==false) {
    	  Error(564);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
//      R _ret=null;
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      if(((String)n.f0.accept(this, argu)).equals("boolean")==false) {
    	  Error(621);
      }
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("boolean")==false) {
    	  Error(625);
      }
      return (R)("boolean");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      if(((String)n.f0.accept(this, argu)).equals("boolean")==false) {
    	  Error(638);
      }
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("boolean")==false) {
    	  Error(642);
      }
      return (R)("boolean");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      if(((String)n.f0.accept(this, argu)).equals("int")==false) {
    	  Error(655);
      }
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("int")==false) {
    	  Error(659);
      }
      return (R)("boolean");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String ltype,rtype;
      ltype=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      rtype=(String)n.f2.accept(this, argu);
      
      if(ltype.equals(rtype)==false) {
    	  Error(677);
      }
 
      return (R)("boolean");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      if(((String)n.f0.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      if(((String)n.f0.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      if(((String)n.f0.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      if(((String)n.f0.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      
      
      if(((String)n.f0.accept(this, argu)).equals("int[]")==false) {
    	  Error();
      }
      n.f1.accept(this, argu);
      if(((String)n.f2.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      n.f3.accept(this, argu);
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      if(((String)n.f0.accept(this, argu)).equals("int[]")==false) {
    	  Error();
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      
      
      Pair<String,HashMap<String,String>> p = (Pair<String,HashMap<String,String>>) argu;
      
      String l;
      
      l=(String)n.f0.accept(this, argu);
      
//      System.out.println(l);
      
      Pair<String,Vector<String>> p2=new Pair<String,Vector<String>>("",new Vector<String>());
      
     
      p2=FindFunc(l,n.f2.f0.tokenImage);
      
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      Vector<String>v=new Vector<String>();
      
      n.f4.accept(this,(A)(new Pair<Vector<String>,Pair<String,HashMap<String,String>>>(v,p)));
      
      if(Argmatch(v,p2.s)==false) {
    	  Error(830);
      }
      
//      System.out.println(v);
//      System.out.println(p2.s);
      
      n.f5.accept(this, argu);
      return (R)(p2.f);
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      
      Pair<Vector<String>,Pair<String,HashMap<String,String>>> p = (Pair<Vector<String>,Pair<String,HashMap<String,String>>>)argu;
      
      Vector<String> v1 = p.f;
      
      v1.add((String)n.f0.accept(this, (A)p.s));
      n.f1.accept(this,argu);
          
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      Pair<Vector<String>,Pair<String,HashMap<String,String>>> p = (Pair<Vector<String>,Pair<String,HashMap<String,String>>>)argu;
      Vector<String> v1 =p.f;
      v1.add((String)n.f1.accept(this,(A)p.s));
      
//      System.out.println(","+(String)n.f1.accept(this, argu));
      return _ret;
//      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
//      R _ret=null;
      Pair<Boolean,String> r=(Pair<Boolean,String>)(n.f0.accept(this, argu));
      
      if(r.f)
    	  return (R)r.s;
      
      String ltype;
      
      ltype=r.s;
      
//      System.out.println(r);
      
      Pair<String,HashMap<String,String>> p = (Pair<String,HashMap<String,String>>) argu;
     
     
	  if(p.s.get(r.s)!=null) {
		  ltype=p.s.get(r.s);
	  }else {
		  ltype=Type(p.f,r.s);
	  }
      
      
      return (R)ltype;
      
//      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)(new Pair<Boolean,String>(true,"int"));
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      return (R)(new Pair<Boolean,String>(true,"boolean"));
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)(new Pair<Boolean,String>(true,"boolean"));
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      return (R)new Pair<Boolean,String>(false,(String)n.f0.accept(this, argu));
//      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Pair<String,HashMap<String,String>> p = (Pair<String,HashMap<String,String>>) argu;
      return (R)(new Pair<Boolean,String>(true,(String)p.f));
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(((String)n.f3.accept(this, argu)).equals("int")==false) {
    	  Error();
      }
      n.f4.accept(this, argu);
      return (R)(new Pair<Boolean,String>(true,"int[]"));
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
//      if(Symboltable.get((String)n.f1.accept(this, argu))==null) {
//    	  Error();
//      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
//      System.out.println((String)n.f1.f0.tokenImage);
      
      return (R)(new Pair<Boolean,String>(true,(String)n.f1.f0.tokenImage));
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(((String)n.f1.accept(this, argu)).equals("boolean")==false) {
    	Error();  
      }
      return (R)(new Pair<Boolean,String>(true,"boolean"));
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)(new Pair<Boolean,String>(true,(String)n.f1.accept(this, argu)));
//      return ;
//      n.f2.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
