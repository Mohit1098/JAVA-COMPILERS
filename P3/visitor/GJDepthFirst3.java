//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst3<R,A> extends GJDepthFirst<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	int temp_no=100,label=0;
	public int IndF,IndV;
	public HashMap<String,Integer> Indexfun;
	public HashMap<String,Integer> Indexvar;
	public HashMap<String,String> parent;
	public HashMap<String,HashMap<String,Vector<Pair<String,String>>>> table1;
	public HashMap<String,Vector<Pair<String,String>>> table2;
//	
//	String get_type(String class_name,String var) {
//		String ans;
//		
//		
//		
//		return ans;
//	}
//		
   public R visit(NodeList n, A argu) {
      R _ret=null;
      String ans=" ",a;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         a=(String)e.nextElement().accept(this,argu);
         _count++;
         if(a!=null) {
         	ans=ans+"\n"+a;
         }
      }
      
      return (R)ans;
//      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
    	  
         R _ret=null;
         String ans=" ",a;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            a=(String)e.nextElement().accept(this,argu);
            _count++;
            if(a!=null) {
            	ans=ans+"\n"+a;
            }
         }
         return (R)(ans+"\n");
      }
      else
         return (R)"";
   }

   public R visit(NodeOptional n, A argu) {
	   String ans;
      if ( n.present() ) {
         ans=(String)n.node.accept(this,argu);
         if(ans==null)
        	 ans=" ";
         return (R)ans;
      }
      else
         return (R)" ";
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return (R)" ";
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      
      String ans="MAIN\n";
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
//      n.f7.accept(this, argu);
//      n.f8.accept(this, argu);
//      n.f9.accept(this, argu);
//      n.f10.accept(this, argu);
//      n.f11.accept(this, argu);
//      n.f12.accept(this, argu);
//      n.f13.accept(this, argu);
      ans=ans+(String)n.f14.accept(this, argu);
//      n.f15.accept(this, argu);
//      n.f16.accept(this, argu);
      ans=ans+"\nEND\n";
      
      System.out.println(ans);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;

      
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A)n.f1.f0.tokenImage);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, (A)n.f1.f0.tokenImage);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      	
    
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      
     
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   Integer psize;
   
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      
      String class_name=(String)argu,func_name=(String)n.f2.f0.tokenImage;
      Pair<String,String>p=new Pair(class_name,func_name);
      psize=0;
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
//      n.f7.accept(this, argu);
//      n.f8.accept(this, (A)p);
//      n.f9.accept(this, argu);
//      n.f10.accept(this, (A)p);
//      n.f11.accept(this, argu);
//      n.f12.accept(this, argu);
      int temp_not=temp_no;
      temp_no+=2;
      
      String ans=" "+class_name+"_"+func_name+" [ "+(psize+1)+" ]\nBEGIN\n"
      +(String)n.f8.accept(this, (A)p)+"\nMOVE TEMP "+(temp_not+1)+" "
    		  +(String)n.f10.accept(this, (A)p)+"\n"+
    		  	"RETURN TEMP "+(temp_not+1)+"\nEND\n";
      
      System.out.println(ans);
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      psize++;
//      System.out.println(i);
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      String a=(String) n.f0.accept(this, argu);
      
      if(a==null)
    	  a=" ";
      return (R)a;
//      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String a=(String)n.f1.accept(this, argu);
      if(a==null)
    	  a=" ";
      return (R)a;
//      n.f2.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      
      String ans;
      String a=(String) n.f0.f0.tokenImage;
      Pair<String,String>p=(Pair<String,String>)argu;
      
      String class_name=p.f,func_name=p.s;
      
      Vector<Pair<String,String>> v1 =table1.get(class_name).get(func_name);
      
      Iterator it= v1.iterator();
      
      int temp_not=temp_no;
      temp_no+=4;
      
      int offset=1;
      boolean fl=false;
      
      while(it.hasNext()) {
    	  if(a.equals(((Pair<String,String>)it.next()).f)==true) {
    		  fl=true;
    		  break;
    	  }
    	  offset++;
      }          
      if(fl) {
    	  ans=" MOVE TEMP "+(offset)+" ";
      }
      else {    	  
    	  ans=" HSTORE TEMP 0 "+((Indexvar.get(a))*4)+" ";
      }      
      ans=ans+(String)n.f2.accept(this, argu)+"\n";
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      return (R)ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
      
      int temp_not=temp_no;
      temp_no+=5;
      
      String a=(String) n.f0.f0.tokenImage,ans;
      
      Pair<String,String>p=(Pair<String,String>)argu;
      
      String class_name=p.f,func_name=p.s;
      
      Vector<Pair<String,String>> v1 =table1.get(class_name).get(func_name);
      
      Iterator it= v1.iterator();
      
      
      int offset=1;
      boolean fl=false;
      
      while(it.hasNext()) {
    	  if(a.equals(((Pair<String,String>)it.next()).f)==true) {
    		  fl=true;
    		  break;
    	  }
    	  offset++;
      }
          
      if(fl) {
    	  ans=" MOVE TEMP "+(temp_not+1)+" TEMP "+offset+"\n";
      }
      else {
    	  
    	  ans=" HLOAD TEMP "+(temp_not+1)+" TEMP 0 "+(Indexvar.get(a)*4)+"\n";
      }
      
      ans=ans+"MOVE TEMP "+(temp_not+4)+" PLUS "+(String)n.f2.accept(this, argu)+" 1\n"+
    		  "MOVE TEMP "+(temp_not+2)+" TIMES TEMP "+(temp_not+4)+" 4\n"+
    		  "MOVE TEMP "+(temp_not+3)+" PLUS TEMP "+(temp_not+2)+" TEMP "+(temp_not+1)+
    		  "\nHSTORE TEMP "+(temp_not+3)+" 0 "+(String)n.f5.accept(this, argu)+"\n"; 
      
      
      
      return (R)ans;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      
      int temp_not=temp_no,label_not=label;
      temp_no+=4;
      label+=3;
      
      String ans=" MOVE TEMP "+(temp_not+1)+" "+(String)n.f2.accept(this, argu)+"\nCJUMP TEMP "+(temp_not+1)+" L"+(label_not+1)+
    		  "\n"+(String)n.f4.accept(this, argu)+
    		  	"\nL"+(label_not+1)+" NOOP\n";
      
      return (R)ans;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
      
      int temp_not=temp_no,label_not=label;
      temp_no+=4;
      label+=4;
      
      String ans=" MOVE TEMP "+(temp_not+1)+" "+(String)n.f2.accept(this, argu)+"\nCJUMP TEMP "+(temp_not+1)+" L"+(label_not+1)+
    		  "\nNOOP\n"+(String)n.f4.accept(this, argu)+" JUMP L"+(label_not+2)+
    		  	"\nL"+(label_not+1)+" "+(String)n.f6.accept(this, argu)+"\nL"+(label_not+2)+" NOOP\n";
      
      return (R)ans;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      
      
      int temp_not=temp_no,label_not=label;
      temp_no+=4;
      label+=4;
      
      String ans="\nL"+(label_not+1)+"\nMOVE TEMP "+(temp_not+1)+" "+(String)n.f2.accept(this, argu)+"\nCJUMP TEMP "+(temp_not+1)+" L"+(label_not+2)+
    		  "\n"+(String)n.f4.accept(this, argu)+"\nJUMP L"+(label_not+1)+"\nL"+(label_not+2)+" NOOP\n";
      
//      System.out.println(ans);
      
      return (R)ans;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      
      String ans;
      int temp_not=temp_no;
      temp_no+=2;
      ans="\nMOVE TEMP "+(temp_not+1)+" "+(String)n.f2.accept(this, argu)+"\nPRINT TEMP "+(temp_not+1)+"\n";
      
//      System.out.println(ans);
      return (R)ans;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String a =(String) n.f0.accept(this, argu);
      if(a==null)
    	  a="";
      return (R)a;
//      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String ans;
      
      ans=" BEGIN\n";
      
      int temp_not=temp_no,label_not=label;
      temp_no+=4;
      label+=3;
      
      ans=ans+"MOVE TEMP "+(temp_not+1)+"\n"+(String)n.f0.accept(this, argu)+"\n";
      n.f1.accept(this, argu);
      ans=ans+"MOVE TEMP "+(temp_not+2)+"\n"+(String)n.f2.accept(this, argu)+"\n";
      
      ans=ans+"CJUMP TEMP "+(temp_not+1)+" L"+(label_not+1)+"\nCJUMP TEMP "+(temp_not+2)+" L"+(label_not+1)+
    		  "\nMOVE TEMP "+(temp_not+3)+" 1\nJUMP L"+(label_not+2)+"\nL"+(label_not+1)
    		  +"\nMOVE TEMP "+(temp_not+3)+" 0\nL"+(label_not+2)+" NOOP\nRETURN TEMP "+(temp_not+3)+"\nEND\n";
      
//      System.out.println(ans);
      
      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
	   R _ret=null;
	      
      String ans;
      
      ans=" BEGIN\n";
      
      int temp_not=temp_no,label_not=label;
      temp_no+=4;
      label+=4;
      
      ans=ans+"MOVE TEMP "+(temp_not+1)+"\n"+(String)n.f0.accept(this, argu)+"\n";
      n.f1.accept(this, argu);
      ans=ans+"MOVE TEMP "+(temp_not+2)+"\n"+(String)n.f2.accept(this, argu)+"\n";
      
      ans=ans+"CJUMP TEMP "+(temp_not+1)+" L"+(label_not+1)+"\nMOVE TEMP "+(temp_not+3)+" 1\nJUMP L"+(label_not+2)
    		  +"\nL"+(label_not+1)+"\nCJUMP TEMP "+(temp_not+2)+" L"+(label_not+3)
    		  +"\nMOVE TEMP "+(temp_not+3)+" 1\nJUMP L"+(label_not+2)
    		  +"\nL"+(label_not+3)+"\nMOVE TEMP "+(temp_not+3)+" 0\nL"+(label_not+2)+" NOOP\nRETURN TEMP "+(temp_not+3)+"\nEND\n";
      
//      System.out.println(ans);
      
      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      
      String ans;
      
      ans=" BEGIN\n";
      
      int temp_not=temp_no;
      temp_no+=3;
      
      ans=ans+"MOVE TEMP "+(temp_not+1)+"\n"+(String)n.f0.accept(this, argu)+"\n";
//      n.f1.accept(this, argu);
      ans=ans+"MOVE TEMP "+(temp_not+2)+"\n"+(String)n.f2.accept(this, argu)+"\n";
      
      ans=ans+"RETURN LE TEMP "+(temp_not+1)+" TEMP "+(temp_not+2)+" END\n";
      
//      System.out.println(ans);
      
      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
	   R _ret=null;
	      
	      String ans;
	      
	      ans=" BEGIN\n";
	      
	      int temp_not=temp_no;
	      temp_no+=3;
	      
	      ans=ans+"MOVE TEMP "+(temp_not+1)+"\n"+(String)n.f0.accept(this, argu)+"\n";
	      n.f1.accept(this, argu);
	      ans=ans+"MOVE TEMP "+(temp_not+2)+"\n"+(String)n.f2.accept(this, argu)+"\n";
	      
	      ans=ans+"RETURN NE TEMP "+(temp_not+1)+" TEMP "+(temp_not+2)+" END\n";
	      
//	      System.out.println(ans);
	      
	      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
//      R _ret=null;
      
      String ans;
      
      ans=" BEGIN\n";
      
      int temp_not=temp_no;
      temp_no+=3;
      
      ans=ans+"MOVE TEMP "+(temp_not+1)+"\n"+(String)n.f0.accept(this, argu)+"\n";
      n.f1.accept(this, argu);
      ans=ans+"MOVE TEMP "+(temp_not+2)+"\n"+(String)n.f2.accept(this, argu)+"\n";
      
      ans=ans+"RETURN PLUS TEMP "+(temp_not+1)+" TEMP "+(temp_not+2)+" END\n";
      
//      System.out.println(ans);
      
      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
	   //R _ret=null;
	      
      String ans;
      
      ans=" BEGIN\n";
      
      int temp_not=temp_no;
      temp_no+=3;
      
      ans=ans+"MOVE TEMP "+(temp_not+1)+"\n"+(String)n.f0.accept(this, argu)+"\n";
      n.f1.accept(this, argu);
      ans=ans+"MOVE TEMP "+(temp_not+2)+"\n"+(String)n.f2.accept(this, argu)+"\n";
      
      ans=ans+"RETURN MINUS TEMP "+(temp_not+1)+" TEMP "+(temp_not+2)+"\nEND\n";
      
      
//      System.out.println(ans);
      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
	 //R _ret=null;
	      
      String ans;
      
      ans=" BEGIN\n";
      
      int temp_not=temp_no;
      temp_no+=3;
      
      ans=ans+"MOVE TEMP "+(temp_not+1)+"\n"+(String)n.f0.accept(this, argu)+"\n";
      n.f1.accept(this, argu);
      ans=ans+"MOVE TEMP "+(temp_not+2)+"\n"+(String)n.f2.accept(this, argu)+"\n";
      
      ans=ans+"RETURN TIMES TEMP "+(temp_not+1)+" TEMP "+(temp_not+2)+"\nEND\n";
      
      
      
      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
	 //R _ret=null;
	      
      String ans;
      
      ans=" BEGIN\n";
      
      int temp_not=temp_no;
      temp_no+=3;
      
      ans=ans+"MOVE TEMP "+(temp_not+1)+"\n"+(String)n.f0.accept(this, argu)+"\n";
      n.f1.accept(this, argu);
      ans=ans+"MOVE TEMP "+(temp_not+2)+"\n"+(String)n.f2.accept(this, argu)+"\n";
      
      ans=ans+"RETURN DIV TEMP "+(temp_not+1)+" TEMP "+(temp_not+2)+"\nEND\n";
    
      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      
      
      
      int temp_not=temp_no;
      temp_no+=7;
      
      String ans=" BEGIN\n";
      
      ans=ans+"MOVE TEMP "+(temp_not+1)+" "+(String)n.f0.accept(this, argu)+"\n";
//      n.f1.accept(this, argu);
      ans=ans+"MOVE TEMP "+(temp_not+2)+" "+(String)n.f2.accept(this, argu)+"\n";
//      n.f3.accept(this, argu);
      
      ans=ans+"MOVE TEMP "+(temp_not+6)+" PLUS TEMP "+(temp_not+2)+" 1\n"
    		  +"MOVE TEMP "+(temp_not+3)+" TIMES TEMP "+(temp_not+6)+" 4\n"
    		  +"MOVE TEMP "+(temp_not+4)+" PLUS TEMP "+(temp_not+1)+" TEMP "+(temp_not+3)+"\n"
      		+"HLOAD TEMP "+(temp_not+5)+" TEMP "+(temp_not+4)+" 0\n"
      		+"RETURN TEMP "+(temp_not+5)+"\nEND\n";
      
     
      
      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
	   int temp_not=temp_no;
      temp_no+=3;
      
      String ans=" BEGIN\n";
      
      ans=ans+"MOVE TEMP "+(temp_not+1)+" "+(String)n.f0.accept(this, argu)+"\n";
      
      ans=ans+"HLOAD TEMP "+(temp_not+2)+" TEMP "+(temp_not+1)+" 0\n"
      		+"RETURN TEMP "+(temp_not+2)+" END\n";
	      
	     
	      
	      return (R)ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
      
      int temp_not=temp_no;
      temp_no+=4;
      
      String a=(String)n.f0.accept(this, argu);
      if(a==null)
    	  a=" ";
      
      String b=(String)n.f4.accept(this, argu);
      if(b==null)
    	  b=" ";
//      
 
      String ans=" BEGIN\nMOVE TEMP "+(temp_not+1)+"\n"+a+
    		  "\nHLOAD TEMP "+(temp_not+2)+" TEMP "+(temp_not+1)+" 0\n"+
    		  "\nHLOAD TEMP "+(temp_not+3)+" TEMP "+(temp_not+2)+" "+(Indexfun.get(n.f2.f0.tokenImage)*4)+
    		  "\nRETURN CALL TEMP "+(temp_not+3)+
    		  " ( TEMP "+(temp_not+1)+" "+b+" )\nEND\n";
      

//      	System.out.println(ans);
      
      return (R)ans;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String a,b,ans;
      a=(String)n.f0.accept(this, argu);
      
      if(a==null)
    	  a="";
      
      b=(String)n.f1.accept(this, argu);
      
      if(b==null)
    	  b="";
      
      ans=a+" "+b+" ";
      
//      n.f1.accept(this, argu);
      return (R)ans;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ans;
      
      ans=(String)n.f1.accept(this, argu);
      
      if(ans==null)
    	  ans="";
      return (R)(" "+ans+" ");
//      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String a=(String) n.f0.accept(this, argu);
      if(a==null)
    	  a=" ";
      return (R)a;
//      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      return (R)(String)(" "+n.f0.accept(this, argu)+" ");
//      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      return (R)" 1 ";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      return (R)" 0 ";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String a=(String) n.f0.accept(this, argu),ans;
      
      Pair<String,String>p=(Pair<String,String>)argu;
      
      String class_name=p.f,func_name=p.s;
      
      Vector<Pair<String,String>> v1 =table1.get(class_name).get(func_name);
      
      Iterator it= v1.iterator();
      
      int temp_not=temp_no;
      temp_no+=4;
      
      int offset=1;
      boolean fl=false;
      
      while(it.hasNext()) {
    	  if(a.equals(((Pair<String,String>)(it.next())).f)==true) {
    		  fl=true;
    		  break;
    		  
    	  }
    	  offset++;
      }  
      if(fl) {
    	  ans=" TEMP "+offset;
      }
      else {
    	  
    	  ans=" BEGIN\nHLOAD TEMP "+(temp_not+1)+" TEMP 0 "+(Indexvar.get(a)*4)+"\nRETURN TEMP "+(temp_not+1)+"\nEND\n";
      }
      
      return (R)ans;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String ans=" TEMP 0\n";
      return (R)ans;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      
      int temp_not=temp_no,label_not=label;
      temp_no+=7;    
      label+=4;

      
      String ans=" BEGIN\nMOVE TEMP "+(temp_not+1)+" PLUS "+(String)n.f3.accept(this, argu)+" 1"+
    		  "\nMOVE TEMP "+(temp_not+2)+" TIMES TEMP "+(temp_not+1)+" 4\n"+
    		  "\nMOVE TEMP "+(temp_not+3)+" HALLOCATE TEMP "+(temp_not+2)+
    		  "\nHSTORE TEMP "+(temp_not+3)+" 0 MINUS TEMP "+(temp_not+1)+" 1"+
    		  "\nMOVE TEMP "+(temp_not+5)+" 4\n"+
    		  "L"+(label_not+1)+"\nMOVE TEMP "+(temp_not+4)+" NE TEMP "+(temp_not+5)+" TEMP "+(temp_not+2)+
    		  "\nCJUMP TEMP "+(temp_not+4)+" L"+(label_not+2)+
    		  "\nMOVE TEMP "+(temp_not+6)+" PLUS TEMP "+(temp_not+3)+" TEMP "+(temp_not+5)+
    		  "\nMOVE TEMP "+(temp_not+5)+" PLUS TEMP "+(temp_not+5)+" 4\n"+
    		  "\nHSTORE TEMP "+(temp_not+6)+" 0 0\nJUMP L"+(label_not+1)+"\nL"+(label_not+2)+" NOOP\n"
    		  +"\nRETURN TEMP "+(temp_not+3)+"\nEND\n";
      
      
      
      return (R)ans;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
     
            
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      
      int temp_not=temp_no,label_not=label;
      temp_no+=6;
      label+=4;
      
      
      String ans=" BEGIN\nMOVE TEMP "+(temp_not+1)+" HALLOCATE "+(IndV+1)*4+
    		  "\nMOVE TEMP "+(temp_not+2)+" HALLOCATE "+(IndF*4)+"\n";
      
      String class_name=(String)n.f1.f0.tokenImage,func_name;
      
      int arr[]=new int[IndF],index;
      
      for(int i=0;i<IndF;++i)
    	  arr[i]=0;
      
      HashMap<String,Vector<Pair<String,String>>>v1;
      
      while(true) {
    	  if(class_name==null)
    		  break;
    	  v1=table1.get(class_name);
    	  
    	  Iterator it=v1.entrySet().iterator(); 
    	  
    	  while (it.hasNext()) { 
              Map.Entry mapElement = (Map.Entry)it.next(); 
              func_name=(String)(mapElement.getKey()); 
              index=Indexfun.get(func_name);
              
              if(arr[index]==1)
            	  continue;
              
              ans=ans+"HSTORE TEMP "+(temp_not+2)+" "+(index*4)+" "+class_name+"_"+func_name+"\n";
              arr[index]=1;
          } 
    	  
    	  class_name=parent.get(class_name);
    	  
      }
      
      ans=ans+"HSTORE TEMP "+(temp_not+1)+" 0 TEMP "+(temp_not+2)+
    		  "\nMOVE TEMP "+(temp_not+4)+" 4\n"+
    		  "L"+(label_not+1)+"\nMOVE TEMP "+(temp_not+3)+" NE TEMP "+(temp_not+4)+" "+((IndV+1)*4)+
    		  "\nCJUMP TEMP "+(temp_not+3)+" L"+(label_not+2)+
    		  "\nMOVE TEMP "+(temp_not+5)+" PLUS TEMP "+(temp_not+1)+" TEMP "+(temp_not+4)+
    		  "\nMOVE TEMP "+(temp_not+4)+" PLUS TEMP "+(temp_not+4)+" 4\n"+
    		  "\nHSTORE TEMP "+(temp_not+5)+" 0 0\nJUMP L"+(label_not+1)+"\nL"+(label_not+2)+" NOOP\n"+
    		  
    		  "\nRETURN TEMP "+(temp_not+1)+"\nEND\n";
      
//      System.out.println(ans);
      
      return (R)ans;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      
      
      int temp_not=temp_no,label_not=label;
      temp_no+=4;
      label+=3;
      
      String ans=" BEGIN\n";
      
      n.f0.accept(this, argu);
      ans=ans+"MOVE TEMP "+(temp_not+1)+"\n"+(String)n.f1.accept(this, argu)+"\n"
    		  +"CJUMP TEMP "+(temp_not+1)+" L"+(label_not+1)+"\nMOVE TEMP "+(temp_not+3)+" 0\n JUMP L"+(label_not+2)+
    		  "\nL"+(label_not+1)+"\nMOVE TEMP "+(temp_not+3)+" 1\n"+
    		  "\nL"+(label_not+2)+" NOOP\nRETURN TEMP "+(temp_not+3)+" END\n";
      
      return (R)ans;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      int temp_not=temp_no;
      temp_no+=2;
      String ans=" BEGIN\n MOVE TEMP "+(temp_not+1)+" "+n.f1.accept(this, argu)+"\nRETURN TEMP "+(temp_not+1)+"\nEND\n";

      return (R)ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
